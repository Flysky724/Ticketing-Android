// Generated by Dagger (https://dagger.dev).
package com.mohkhz.flysky_agent;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.mohkhz.covid19_compose.data.repo.Repository;
import com.mohkhz.covid19_compose.ui.Chooser.ChooserViewModel;
import com.mohkhz.covid19_compose.ui.Chooser.ChooserViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mohkhz.flysky_agent.data.Api.Api;
import com.mohkhz.flysky_agent.di.AppModule;
import com.mohkhz.flysky_agent.di.AppModule_ProvideTicketFactory;
import com.mohkhz.flysky_agent.di.AppModule_ProviderApiFactory;
import com.mohkhz.flysky_agent.di.AppModule_ProviderRepositoryFactory;
import com.mohkhz.flysky_agent.di.AppModule_ProviderUserFactory;
import com.mohkhz.flysky_agent.ui.Home.HomeViewModel;
import com.mohkhz.flysky_agent.ui.Home.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mohkhz.flysky_agent.ui.NewAgent.NewAgentViewModel;
import com.mohkhz.flysky_agent.ui.NewAgent.NewAgentViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mohkhz.flysky_agent.ui.Profile.ProfileViewModel;
import com.mohkhz.flysky_agent.ui.Profile.ProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mohkhz.flysky_agent.ui.Ticket.TicketViewModel;
import com.mohkhz.flysky_agent.ui.Ticket.TicketViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mohkhz.flysky_agent.ui.login.LoginViewModel;
import com.mohkhz.flysky_agent.ui.login.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mohkhz.flysky_agent_support.data.model.Ticket;
import com.mohkhz.flysky_agent_support.data.model.User;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyApp_HiltComponents_SingletonC extends MyApp_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerMyApp_HiltComponents_SingletonC singletonC = this;

  private volatile Object api = new MemoizedSentinel();

  private volatile Object user = new MemoizedSentinel();

  private volatile Object ticket = new MemoizedSentinel();

  private volatile Object repository = new MemoizedSentinel();

  private DaggerMyApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  private Api api() {
    Object local = api;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = api;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProviderApiFactory.providerApi();
          api = DoubleCheck.reentrantCheck(api, local);
        }
      }
    }
    return (Api) local;
  }

  private User user() {
    Object local = user;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = user;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProviderUserFactory.providerUser();
          user = DoubleCheck.reentrantCheck(user, local);
        }
      }
    }
    return (User) local;
  }

  private Ticket ticket() {
    Object local = ticket;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = ticket;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvideTicketFactory.provideTicket();
          ticket = DoubleCheck.reentrantCheck(ticket, local);
        }
      }
    }
    return (Ticket) local;
  }

  private Repository repository() {
    Object local = repository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = repository;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProviderRepositoryFactory.providerRepository(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), api(), user(), ticket());
          repository = DoubleCheck.reentrantCheck(repository, local);
        }
      }
    }
    return (Repository) local;
  }

  @Override
  public void injectMyApp(MyApp myApp) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public MyApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerMyApp_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MyApp_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public MyApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityRetainedCImpl extends MyApp_HiltComponents.ActivityRetainedC {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl(DaggerMyApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;


    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private static final class ActivityCBuilder implements MyApp_HiltComponents.ActivityC.Builder {
      private final DaggerMyApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private Activity activity;

      private ActivityCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public MyApp_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
      }
    }

    private static final class ActivityCImpl extends MyApp_HiltComponents.ActivityC {
      private final DaggerMyApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl = this;

      private ActivityCImpl(DaggerMyApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
      }

      @Override
      public Set<String> getViewModelKeys() {
        return SetBuilder.<String>newSetBuilder(6).add(ChooserViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NewAgentViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TicketViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      private static final class FragmentCBuilder implements MyApp_HiltComponents.FragmentC.Builder {
        private final DaggerMyApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private Fragment fragment;

        private FragmentCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public MyApp_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragment);
        }
      }

      private static final class FragmentCI extends MyApp_HiltComponents.FragmentC {
        private final DaggerMyApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final FragmentCI fragmentCI = this;

        private FragmentCI(DaggerMyApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            Fragment fragmentParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return activityCImpl.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI);
        }

        private static final class ViewWithFragmentCBuilder implements MyApp_HiltComponents.ViewWithFragmentC.Builder {
          private final DaggerMyApp_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private View view;

          private ViewWithFragmentCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;
          }

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public MyApp_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI, view);
          }
        }

        private static final class ViewWithFragmentCI extends MyApp_HiltComponents.ViewWithFragmentC {
          private final DaggerMyApp_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private final ViewWithFragmentCI viewWithFragmentCI = this;

          private ViewWithFragmentCI(DaggerMyApp_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI, View viewParam) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;


          }
        }
      }

      private static final class ViewCBuilder implements MyApp_HiltComponents.ViewC.Builder {
        private final DaggerMyApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private View view;

        private ViewCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public MyApp_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(singletonC, activityRetainedCImpl, activityCImpl, view);
        }
      }

      private static final class ViewCI extends MyApp_HiltComponents.ViewC {
        private final DaggerMyApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final ViewCI viewCI = this;

        private ViewCI(DaggerMyApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            View viewParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }
      }
    }

    private static final class ViewModelCBuilder implements MyApp_HiltComponents.ViewModelC.Builder {
      private final DaggerMyApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private SavedStateHandle savedStateHandle;

      private ViewModelCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public MyApp_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
      }
    }

    private static final class ViewModelCImpl extends MyApp_HiltComponents.ViewModelC {
      private final SavedStateHandle savedStateHandle;

      private final DaggerMyApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl = this;

      private volatile Provider<ChooserViewModel> chooserViewModelProvider;

      private volatile Provider<HomeViewModel> homeViewModelProvider;

      private volatile Provider<LoginViewModel> loginViewModelProvider;

      private volatile Provider<NewAgentViewModel> newAgentViewModelProvider;

      private volatile Provider<ProfileViewModel> profileViewModelProvider;

      private volatile Provider<TicketViewModel> ticketViewModelProvider;

      private ViewModelCImpl(DaggerMyApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.savedStateHandle = savedStateHandleParam;

      }

      private ChooserViewModel chooserViewModel() {
        return new ChooserViewModel(singletonC.repository());
      }

      private Provider<ChooserViewModel> chooserViewModelProvider() {
        Object local = chooserViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
          chooserViewModelProvider = (Provider<ChooserViewModel>) local;
        }
        return (Provider<ChooserViewModel>) local;
      }

      private HomeViewModel homeViewModel() {
        return new HomeViewModel(singletonC.repository(), savedStateHandle);
      }

      private Provider<HomeViewModel> homeViewModelProvider() {
        Object local = homeViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
          homeViewModelProvider = (Provider<HomeViewModel>) local;
        }
        return (Provider<HomeViewModel>) local;
      }

      private LoginViewModel loginViewModel() {
        return new LoginViewModel(singletonC.repository());
      }

      private Provider<LoginViewModel> loginViewModelProvider() {
        Object local = loginViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
          loginViewModelProvider = (Provider<LoginViewModel>) local;
        }
        return (Provider<LoginViewModel>) local;
      }

      private NewAgentViewModel newAgentViewModel() {
        return new NewAgentViewModel(singletonC.repository());
      }

      private Provider<NewAgentViewModel> newAgentViewModelProvider() {
        Object local = newAgentViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
          newAgentViewModelProvider = (Provider<NewAgentViewModel>) local;
        }
        return (Provider<NewAgentViewModel>) local;
      }

      private ProfileViewModel profileViewModel() {
        return new ProfileViewModel(singletonC.repository(), savedStateHandle);
      }

      private Provider<ProfileViewModel> profileViewModelProvider() {
        Object local = profileViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
          profileViewModelProvider = (Provider<ProfileViewModel>) local;
        }
        return (Provider<ProfileViewModel>) local;
      }

      private TicketViewModel ticketViewModel() {
        return new TicketViewModel(singletonC.repository(), savedStateHandle);
      }

      private Provider<TicketViewModel> ticketViewModelProvider() {
        Object local = ticketViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
          ticketViewModelProvider = (Provider<TicketViewModel>) local;
        }
        return (Provider<TicketViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(6).put("com.mohkhz.covid19_compose.ui.Chooser.ChooserViewModel", (Provider) chooserViewModelProvider()).put("com.mohkhz.flysky_agent.ui.Home.HomeViewModel", (Provider) homeViewModelProvider()).put("com.mohkhz.flysky_agent.ui.login.LoginViewModel", (Provider) loginViewModelProvider()).put("com.mohkhz.flysky_agent.ui.NewAgent.NewAgentViewModel", (Provider) newAgentViewModelProvider()).put("com.mohkhz.flysky_agent.ui.Profile.ProfileViewModel", (Provider) profileViewModelProvider()).put("com.mohkhz.flysky_agent.ui.Ticket.TicketViewModel", (Provider) ticketViewModelProvider()).build();
      }

      private static final class SwitchingProvider<T> implements Provider<T> {
        private final DaggerMyApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ViewModelCImpl viewModelCImpl;

        private final int id;

        SwitchingProvider(DaggerMyApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.viewModelCImpl = viewModelCImpl;
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.mohkhz.covid19_compose.ui.Chooser.ChooserViewModel 
            return (T) viewModelCImpl.chooserViewModel();

            case 1: // com.mohkhz.flysky_agent.ui.Home.HomeViewModel 
            return (T) viewModelCImpl.homeViewModel();

            case 2: // com.mohkhz.flysky_agent.ui.login.LoginViewModel 
            return (T) viewModelCImpl.loginViewModel();

            case 3: // com.mohkhz.flysky_agent.ui.NewAgent.NewAgentViewModel 
            return (T) viewModelCImpl.newAgentViewModel();

            case 4: // com.mohkhz.flysky_agent.ui.Profile.ProfileViewModel 
            return (T) viewModelCImpl.profileViewModel();

            case 5: // com.mohkhz.flysky_agent.ui.Ticket.TicketViewModel 
            return (T) viewModelCImpl.ticketViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private static final class ServiceCBuilder implements MyApp_HiltComponents.ServiceC.Builder {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ServiceCImpl extends MyApp_HiltComponents.ServiceC {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerMyApp_HiltComponents_SingletonC singletonC, Service serviceParam) {
      this.singletonC = singletonC;


    }
  }
}
