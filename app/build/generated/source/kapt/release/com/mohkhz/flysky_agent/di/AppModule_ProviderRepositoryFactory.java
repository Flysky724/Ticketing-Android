// Generated by Dagger (https://dagger.dev).
package com.mohkhz.flysky_agent.di;

import android.content.Context;
import com.mohkhz.covid19_compose.data.repo.Repository;
import com.mohkhz.flysky_agent.data.Api.Api;
import com.mohkhz.flysky_agent_support.data.model.Ticket;
import com.mohkhz.flysky_agent_support.data.model.User;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProviderRepositoryFactory implements Factory<Repository> {
  private final Provider<Context> contextProvider;

  private final Provider<Api> apiProvider;

  private final Provider<User> userProvider;

  private final Provider<Ticket> ticketProvider;

  public AppModule_ProviderRepositoryFactory(Provider<Context> contextProvider,
      Provider<Api> apiProvider, Provider<User> userProvider, Provider<Ticket> ticketProvider) {
    this.contextProvider = contextProvider;
    this.apiProvider = apiProvider;
    this.userProvider = userProvider;
    this.ticketProvider = ticketProvider;
  }

  @Override
  public Repository get() {
    return providerRepository(contextProvider.get(), apiProvider.get(), userProvider.get(), ticketProvider.get());
  }

  public static AppModule_ProviderRepositoryFactory create(Provider<Context> contextProvider,
      Provider<Api> apiProvider, Provider<User> userProvider, Provider<Ticket> ticketProvider) {
    return new AppModule_ProviderRepositoryFactory(contextProvider, apiProvider, userProvider, ticketProvider);
  }

  public static Repository providerRepository(Context context, Api api, User user, Ticket ticket) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.providerRepository(context, api, user, ticket));
  }
}
